<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de 
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$.
  Un elemento de $P$ se denomina <i>regla de análisis</i>. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina <i>expresión de arranque</i>.
</ol>
<ol>
  <li>
    $\Sigma = \{ begin, call, const, do, else, end, if, odd, procedure, then, var, while \} \cup$ <br/>
    $\{;, ., (, ), =, +, -, *, /, <, >, <=, >=, ==, !=, 0 \ldots 9 \}$
  </li>
  <li>
    $V = \{ program, block, const\_decls, const\_decl, var\_decl, proc\_decl \} \cup$ <br/>
    $\{ arglist, argexplist, statement, condition, expression, term, factor \} \cup$ <br/>
    $\{ ASSIGN, ADD, MUL, ID, NUMBER, COMPARISON\_OP \} \cup$ <br/>
    $\{ COMMA, END\_SENTENCE, END\_SYMBOL, LEFTPAR \} \cup$ <br/>
    $\{ RIGHTPAR, BEGIN, CALL, CONST, DO, ELSE, END, IF \} \cup$ <br/>
    $\{ ODD, PROCEDURE, THEN, VAR, WHILE \}$
  </li>
  <li> $P =$ </li>
  <ul style="list-style:none;font-family:monospace;">
    <li>
      <b>program</b> $\leftarrow$ <b>block</b> END_SYMBOL
    </li>
    <li>
      <b>block</b> $\leftarrow$ <b>const_decls</b>? <b>var_decl</b>? <b>proc_decl</b>* <b>statement</b>
    </li>
    <li>
      <b>const_decls</b> $\leftarrow$ CONST <b>const_decl</b> (COMMA <b>const_decl</b>)* END_SENTENCE
    </li>
    <li>
      <b>const_decl</b> $\leftarrow$ ID ASSIGN NUMBER
    </li>
    <li>
      <b>var_decl</b> $\leftarrow$ VAR ID (COMMA ID)* END_SENTENCE
    </li>
    <li>
      <b>proc_decl</b> $\leftarrow$ PROCEDURE ID <b>arglist</b>? END_SENTENCE <b>block</b> END_SENTENCE
    </li>
    <li>
      <b>arglist</b> $\leftarrow$ LEFTPAR ID (COMMA ID)* RIGHTPAR
    </li>
    <li>
      <b>argexplist</b> $\leftarrow$ LEFTPAR <b>expression</b> (COMMA <b>expression</b>)* RIGHTPAR
    </li>
    <li>
      <b>statement</b> $\leftarrow$ <br/>
      &nbsp;&nbsp;CALL ID <b>argexplist</b>? <br/>
      / BEGIN <b>statement</b> (END_SENTENCE <b>statement</b>)* END <br/>
      / IF LEFTPAR <b>condition</b> RIGHTPAR THEN <b>statement</b> ELSE <b>statement</b> <br/>
      / IF LEFTPAR <b>condition</b> RIGHTPAR THEN <b>statement</b> <br/>
      / WHILE LEFTPAR <b>condition</b> RIGHTPAR DO <b>statement</b> <br/>
      / DO <b>statement</b> WHILE LEFTPAR <b>condition</b> RIGHTPAR <br/>
      / ID ASSIGN <b>expression</b> <br/>
      / $\epsilon$
    </li>
    <li>
      <b>condition</b> $\leftarrow$ <br/>
      &nbsp;&nbsp;ODD <b>expression</b> <br/>
      / <b>expression</b> COMPARISON_OP <b>expression</b>
    </li>
    <li>
      <b>expression</b> $\leftarrow$ <b>term</b> (ADD <b>term</b>)*
    </li>
    <li>
      <b>term</b> $\leftarrow$ <b>factor</b> (MUL <b>factor</b>)*
    </li>
    <li>
      <b>factor</b> $\leftarrow$ </br>
      &nbsp;&nbsp;NUMBER <br/>
      / ID <br/>
      / LEFTPAR <b>expression</b> RIGHTPAR
    </li>
    <li>
      _ $\leftarrow$ $([a-zA-Z_][a-zA-Z_0-9]*)
    </li>
    <li>
      ASSIGN $\leftarrow$ _ '=' _
    </li>
    <li>
      ADD $\leftarrow$ _ [+-] _
    </li>
    <li>
      MUL $\leftarrow$ _ [*/] _
    </li>
    <li>
      ID $\leftarrow$ _ $([a-zA-Z_][a-zA-Z_0-9]*) _
    </li>
    <li>
      NUMBER $\leftarrow$ _ $[0-9]+ _
    </li>
    <li>
      COMPARISON_OP $\leftarrow$ <br/>
      &nbsp;&nbsp;_ $([<>=!]'=') _ <br/>
      / _ [<>] _
    </li>
    <li>
      COMMA $\leftarrow$ _ ',' _
    </li>
    <li>
      END_SENTENCE $\leftarrow$ _ ';' _
    </li>
    <li>
      END_SYMBOL $\leftarrow$ _ '.' _
    </li>
    <li>
      LEFTPAR $\leftarrow$ _ '(' _
    </li>
    <li>
      RIGHTPAR $\leftarrow$ _ ')' _
    </li>
    <li>
      BEGIN $\leftarrow$ _ 'begin' _
    </li>
    <li>
      CALL $\leftarrow$ _ 'call' _
    </li>
    <li>
      CONST $\leftarrow$ _ 'const' _
    </li>
    <li>
      DO $\leftarrow$ _ 'do' _
    </li>
    <li>
      ELSE $\leftarrow$ _ 'else' _
    </li>
    <li>
      END $\leftarrow$ _ 'end' _
    </li>
    <li>
      IF $\leftarrow$ _ 'if' _
    </li>
    <li>
      ODD $\leftarrow$ _ 'odd' _
    </li>
    <li>
      PROCEDURE $\leftarrow$ _ 'procedure' _
    </li>
    <li>
      THEN $\leftarrow$ _ 'then' _
    </li>
    <li>
      VAR $\leftarrow$ _ 'var' _
    </li>
    <li>
      WHILE $\leftarrow$ _ 'while' _
    </li>
  </ul>
  <li> $S = program$ </li>
</ol>
